[{"C:\\Development\\own work\\420-countdown\\420-countdown-web\\src\\index.js":"1","C:\\Development\\own work\\420-countdown\\420-countdown-web\\src\\App.js":"2","C:\\Development\\own work\\420-countdown\\420-countdown-web\\src\\reportWebVitals.js":"3","C:\\Development\\own work\\420-countdown\\420-countdown-web\\src\\components\\Time\\Time.js":"4","C:\\Development\\own work\\420-countdown\\420-countdown-web\\src\\models\\TimeModel.js":"5"},{"size":517,"mtime":1609713565478,"results":"6","hashOfConfig":"7"},{"size":291,"mtime":1609728157549,"results":"8","hashOfConfig":"7"},{"size":375,"mtime":1609713565526,"results":"9","hashOfConfig":"7"},{"size":1690,"mtime":1609726981041,"results":"10","hashOfConfig":"7"},{"size":516,"mtime":1609722301075,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ivn5h3",{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"C:\\Development\\own work\\420-countdown\\420-countdown-web\\src\\index.js",[],"C:\\Development\\own work\\420-countdown\\420-countdown-web\\src\\App.js",["24"],"C:\\Development\\own work\\420-countdown\\420-countdown-web\\src\\reportWebVitals.js",[],"C:\\Development\\own work\\420-countdown\\420-countdown-web\\src\\components\\Time\\Time.js",["25","26"],"import React from \"react\";\r\nimport cls from \"./Time.module.css\";\r\nimport TimeModel from \"../../models/TimeModel\";\r\nimport \"./styles.css\";\r\n\r\nconst { useState, useEffect } = React;\r\n\r\nconst Time = () => {\r\n  const [countdownDate, setCountdownDate] = useState(null);\r\n\r\n  const [state, setState] = useState({\r\n    hours: 0,\r\n    minutes: 0,\r\n    seconds: 0,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (countdownDate) {\r\n      setInterval(() => updateCountdown(), 1000);\r\n    }\r\n    setCountdownDate(TimeModel.getCountdownDateTime());\r\n  }, [countdownDate]);\r\n\r\n  const updateCountdown = () => {\r\n    if (countdownDate) {\r\n      // Get the current time\r\n\r\n      const currentTime = new Date().getTime();\r\n\r\n      // Get the time remaining until the countdown date\r\n      const distanceToDate = countdownDate - currentTime;\r\n\r\n      // Calculate days, hours, minutes and seconds remaining\r\n      let hours = Math.floor(\r\n        (distanceToDate % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\r\n      )\r\n        .toString()\r\n        .padStart(2, \"0\");\r\n      let minutes = Math.floor(\r\n        (distanceToDate % (1000 * 60 * 60)) / (1000 * 60)\r\n      )\r\n        .toString()\r\n        .padStart(2, \"0\");\r\n      let seconds = Math.floor((distanceToDate % (1000 * 60)) / 1000)\r\n        .toString()\r\n        .padStart(2, \"0\");\r\n\r\n      // Set the state to each new time\r\n      setState({ hours: hours, minutes: minutes, seconds: seconds });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"countdown-container\">\r\n        <span>{state.hours + \":\"}</span>\r\n        <span>{state.minutes + \":\"}</span>\r\n        <span>{state.seconds}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Time;\r\n",["27","28"],"C:\\Development\\own work\\420-countdown\\420-countdown-web\\src\\models\\TimeModel.js",[],{"ruleId":"29","severity":1,"message":"30","line":8,"column":7,"nodeType":"31","endLine":8,"endColumn":55},{"ruleId":"32","severity":1,"message":"33","line":2,"column":8,"nodeType":"34","messageId":"35","endLine":2,"endColumn":11},{"ruleId":"36","severity":1,"message":"37","line":22,"column":6,"nodeType":"38","endLine":22,"endColumn":21,"suggestions":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'cls' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'updateCountdown'. Either include it or remove the dependency array.","ArrayExpression",["44"],"no-native-reassign",["45"],"no-negated-in-lhs",["46"],{"desc":"47","fix":"48"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [countdownDate, updateCountdown]",{"range":"49","text":"50"},[533,548],"[countdownDate, updateCountdown]"]