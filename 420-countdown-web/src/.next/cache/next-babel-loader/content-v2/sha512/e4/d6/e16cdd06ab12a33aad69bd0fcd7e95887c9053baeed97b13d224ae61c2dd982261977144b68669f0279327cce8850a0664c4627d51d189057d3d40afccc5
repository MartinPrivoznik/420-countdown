{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport toggleCountToPM from \"../actions/toggleCountToPM\";\nimport updateCountdownDate from \"../actions/updateCountdownDate\";\nimport updateRemainingTime from \"../actions/updateRemainingTime\";\nimport TimeModel from \"../models/TimeModel\";\n\nvar useTime = function useTime() {\n  _s();\n\n  var dispatch = useDispatch();\n  var remainingTime = useSelector(function (state) {\n    return state.remainingTime;\n  });\n  var countdownDate = useSelector(function (state) {\n    return state.countdownDate;\n  });\n  var settings = useSelector(function (state) {\n    return state.settingsReducer;\n  });\n\n  var setRemainingTime = function setRemainingTime(time) {\n    dispatch(updateRemainingTime(time));\n  };\n\n  var setCountdownDate = function setCountdownDate(countdownDate) {\n    dispatch(updateCountdownDate(countdownDate));\n  };\n\n  var toggleCountToPMSwitch = function toggleCountToPMSwitch() {\n    var newCountToPM = !settings.countToPM;\n    dispatch(updateCountdownDate(TimeModel.getCountdownDateTime(newCountToPM)));\n    dispatch(toggleCountToPM(newCountToPM));\n  };\n\n  return {\n    remainingTime: remainingTime,\n    countdownDate: countdownDate,\n    settings: settings,\n    setRemainingTime: setRemainingTime,\n    setCountdownDate: setCountdownDate,\n    toggleCountToPMSwitch: toggleCountToPMSwitch\n  };\n};\n\n_s(useTime, \"7a34yR/KDdUzAwGHrK0XGph45Kw=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n\nexport default useTime;","map":{"version":3,"sources":["C:/Users/marti/Desktop/420-countdown-web/src/hooks/useTime.js"],"names":["useDispatch","useSelector","toggleCountToPM","updateCountdownDate","updateRemainingTime","TimeModel","useTime","dispatch","remainingTime","state","countdownDate","settings","settingsReducer","setRemainingTime","time","setCountdownDate","toggleCountToPMSwitch","newCountToPM","countToPM","getCountdownDateTime"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,eAAP,MAA4B,4BAA5B;AACA,OAAOC,mBAAP,MAAgC,gCAAhC;AACA,OAAOC,mBAAP,MAAgC,gCAAhC;AAEA,OAAOC,SAAP,MAAsB,qBAAtB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AAAA;;AACpB,MAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA,MAAMQ,aAAa,GAAGP,WAAW,CAAC,UAACQ,KAAD;AAAA,WAAWA,KAAK,CAACD,aAAjB;AAAA,GAAD,CAAjC;AACA,MAAME,aAAa,GAAGT,WAAW,CAAC,UAACQ,KAAD;AAAA,WAAWA,KAAK,CAACC,aAAjB;AAAA,GAAD,CAAjC;AACA,MAAMC,QAAQ,GAAGV,WAAW,CAAC,UAACQ,KAAD;AAAA,WAAWA,KAAK,CAACG,eAAjB;AAAA,GAAD,CAA5B;;AAEA,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,IAAD,EAAU;AACjCP,IAAAA,QAAQ,CAACH,mBAAmB,CAACU,IAAD,CAApB,CAAR;AACD,GAFD;;AAIA,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACL,aAAD,EAAmB;AAC1CH,IAAAA,QAAQ,CAACJ,mBAAmB,CAACO,aAAD,CAApB,CAAR;AACD,GAFD;;AAIA,MAAMM,qBAAqB,GAAG,SAAxBA,qBAAwB,GAAM;AAClC,QAAMC,YAAY,GAAG,CAACN,QAAQ,CAACO,SAA/B;AACAX,IAAAA,QAAQ,CAACJ,mBAAmB,CAACE,SAAS,CAACc,oBAAV,CAA+BF,YAA/B,CAAD,CAApB,CAAR;AACAV,IAAAA,QAAQ,CAACL,eAAe,CAACe,YAAD,CAAhB,CAAR;AACD,GAJD;;AAMA,SAAO;AACLT,IAAAA,aAAa,EAAbA,aADK;AAELE,IAAAA,aAAa,EAAbA,aAFK;AAGLC,IAAAA,QAAQ,EAARA,QAHK;AAILE,IAAAA,gBAAgB,EAAhBA,gBAJK;AAKLE,IAAAA,gBAAgB,EAAhBA,gBALK;AAMLC,IAAAA,qBAAqB,EAArBA;AANK,GAAP;AAQD,CA5BD;;GAAMV,O;UACaN,W,EACKC,W,EACAA,W,EACLA,W;;;AA0BnB,eAAeK,OAAf","sourcesContent":["import { useDispatch, useSelector } from \"react-redux\";\r\nimport toggleCountToPM from \"../actions/toggleCountToPM\";\r\nimport updateCountdownDate from \"../actions/updateCountdownDate\";\r\nimport updateRemainingTime from \"../actions/updateRemainingTime\";\r\n\r\nimport TimeModel from \"../models/TimeModel\";\r\n\r\nconst useTime = () => {\r\n  const dispatch = useDispatch();\r\n  const remainingTime = useSelector((state) => state.remainingTime);\r\n  const countdownDate = useSelector((state) => state.countdownDate);\r\n  const settings = useSelector((state) => state.settingsReducer);\r\n\r\n  const setRemainingTime = (time) => {\r\n    dispatch(updateRemainingTime(time));\r\n  };\r\n\r\n  const setCountdownDate = (countdownDate) => {\r\n    dispatch(updateCountdownDate(countdownDate));\r\n  };\r\n\r\n  const toggleCountToPMSwitch = () => {\r\n    const newCountToPM = !settings.countToPM;\r\n    dispatch(updateCountdownDate(TimeModel.getCountdownDateTime(newCountToPM)));\r\n    dispatch(toggleCountToPM(newCountToPM));\r\n  };\r\n\r\n  return {\r\n    remainingTime,\r\n    countdownDate,\r\n    settings,\r\n    setRemainingTime,\r\n    setCountdownDate,\r\n    toggleCountToPMSwitch,\r\n  };\r\n};\r\n\r\nexport default useTime;\r\n"]},"metadata":{},"sourceType":"module"}