{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as TYPES from \"../store/types\";\nconst initialState = {\n  countToPM: false\n};\nexport const settingsReducer = (state, action) => {\n  state = state || initialState;\n\n  if (action.type === TYPES.SET_COUNT_TO_PM) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      countToPM: action.payload\n    });\n  } else {\n    return state;\n  }\n};\nexport default settingsReducer;","map":{"version":3,"sources":["C:/Development/OwnWork/420-countdown/420-countdown-web/src/reducers/settingsReducer.js"],"names":["TYPES","initialState","countToPM","settingsReducer","state","action","type","SET_COUNT_TO_PM","payload"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,gBAAvB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE;AADQ,CAArB;AAIA,OAAO,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAChDD,EAAAA,KAAK,GAAGA,KAAK,IAAIH,YAAjB;;AAEA,MAAII,MAAM,CAACC,IAAP,KAAgBN,KAAK,CAACO,eAA1B,EAA2C;AACzC,2CACKH,KADL;AAEEF,MAAAA,SAAS,EAAEG,MAAM,CAACG;AAFpB;AAID,GALD,MAKO;AACL,WAAOJ,KAAP;AACD;AACF,CAXM;AAaP,eAAeD,eAAf","sourcesContent":["import * as TYPES from \"../store/types\";\r\n\r\nconst initialState = {\r\n  countToPM: false,\r\n};\r\n\r\nexport const settingsReducer = (state, action) => {\r\n  state = state || initialState;\r\n\r\n  if (action.type === TYPES.SET_COUNT_TO_PM) {\r\n    return {\r\n      ...state,\r\n      countToPM: action.payload,\r\n    };\r\n  } else {\r\n    return state;\r\n  }\r\n};\r\n\r\nexport default settingsReducer;\r\n"]},"metadata":{},"sourceType":"module"}